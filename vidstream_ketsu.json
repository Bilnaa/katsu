{
    "resolverInfo": {
        "resolverName": "VIDSTREAMING",
        "nameMatches": ["VIDSTREAMING", "GOGO-STREAM", "GOGO-PLAY", "STREAMANI", "GOLOAD", "GOLOAD1", "GOGOPLAY1", "GOGOPLAY2", "GOGOPLAY3", "GOGOPLAY4", "GOGOPLAY5", "GOGOPLAY"],
        "developer": "Uknown",
        "moduleID": "48539488484445",
        "resolverVersion": 5.4,
        "baseURL": ""
    },
    "resolver": [{
        "request": {
            "url": "empty",
            "method": "get",
            "headers": [{
                "key": "key",
                "value": "value"
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": false,
            "loadInWebView": false,
            "javaScript": "function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(video) { this.video = video;}function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getNext(match, array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } }}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)];var videos = [];var parsedJson = JSON.parse(savedData.innerHTML);var nextRequest = parsedJson.request.url + '&done=done';var found = false;var newFound = false;try { for (source of playerInstance.getPlaylist()) { for (vid of source.allSources) { let mviD = vid.file; let quality = vid.label; if (mviD != undefined && quality != undefined) { videos.push(new Video(quality, new ModuleRequest(mviD, 'get', emptyKeyValue, null))); newFound = true; } } }} catch { newFound = false;}if (newFound) { nextRequest = '';}for (var x = 0; x < videos.length; x++) { let video = videos[x]; if (video.videoQuality.includes('480')) { videos.unshift(videos.splice(x, 1)[0]); found = true; continue; } if (found && !video.videoQuality.includes('480')) { break; }} var found = false;for (var x = 0; x < videos.length; x++) { let video = videos[x]; if (video.videoQuality.includes('480')) { videos.unshift(videos.splice(x, 1)[0]); found = true; continue; } if (found && !video.videoQuality.includes('480')) { break; }} let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue);var chaptersObject = new Resolver(new ModuleRequest(nextRequest, 'get', emptyKeyValue, null), emptyExtra, new JavascriptConfig(true, false, ''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
            "moduleID": "234234823",
            "video": [{
                "videoQuality": "720",
                "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [{
                        "key": "key",
                        "value": "value"
                    }],
                    "httpBody": null
                }
            }]
        }
    }, {
        "request": {
            "url": "empty",
            "method": "get",
            "headers": [{
                "key": "key",
                "value": "value"
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": "var script = document.createElement('script');script.src = 'https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js';document.head.appendChild(script);script.addEventListener('load', function () { function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url), new KeyValue('X-Requested-With', 'XMLHttpRequest')]; var emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var newRequest = new ModuleRequest('', '', emptyKeyValue, null); var parseUrl = new URL(parsedJson.request.url); var key = document.querySelector('body').getAttribute('class').split('-')[1]; var IV = document.querySelector(\"div[class*='container-']\").getAttribute('class').split('-')[1]; emptyKeyValue.push(new KeyValue('Key', key)); emptyKeyValue.push(new KeyValue('IV', IV)); var cryptoToken = document.querySelector('p[data-name=episode]').getAttribute('data-value'); var decryptedData = CryptoJS.AES.decrypt(cryptoToken, CryptoJS.enc.Utf8.parse(key), { 'iv': CryptoJS.enc.Utf8.parse(IV) }); decryptedData = CryptoJS.enc.Utf8.stringify(decryptedData); var id = decryptedData.substr(0, decryptedData.indexOf('&')); id = CryptoJS.AES.encrypt(id, CryptoJS.enc.Utf8.parse(key), { 'iv': CryptoJS.enc.Utf8.parse(IV) }).toString(); let rest = decryptedData.substr(decryptedData.indexOf('&')); newRequest = new ModuleRequest(`${parseUrl.origin}/encrypt-ajax.php?id=${id + rest}`, 'get', emptyKeyValue, null); var chaptersObject = new Resolver(newRequest, emptyExtra, new JavascriptConfig(false, false, ''), new Output([])); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;});"
        },
        "output": {
            "moduleID": "234234823",
            "video": [{
                "videoQuality": "720",
                "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [{
                        "key": "key",
                        "value": "value"
                    }],
                    "httpBody": null
                }
            }]
        }
    }, {
        "request": {
            "url": "empty",
            "method": "get",
            "headers": [{
                "key": "key",
                "value": "value"
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": "var script = document.createElement('script'); script.src = 'https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js'; document.head.appendChild(script); script.addEventListener('load', function () { function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function getValueFromKey(keys, key) { for (var x = 0; x < keys.length; x++) { let tKey = keys[x]; if (tKey.key == key) { return tKey.value; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)]; var emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var videos = []; var key = getValueFromKey(parsedJson.request.headers, 'Key'); var IV = getValueFromKey(parsedJson.request.headers, 'IV'); var script = document.querySelector('script:nth-child(2)'); var parsedData = JSON.parse(script.innerHTML.replace('/*', '').replace('*/', '')); var decryptedData = CryptoJS.AES.decrypt(parsedData.data, CryptoJS.enc.Utf8.parse(key), { 'iv': CryptoJS.enc.Utf8.parse(IV) }); decryptedData = CryptoJS.enc.Utf8.stringify(decryptedData); decryptedData = JSON.parse(decryptedData); for (const source of decryptedData.source) { videos.push(new Video(`${source.label.replace(' ', '').toLowerCase()} | ${source.type}`, new ModuleRequest(source.file, 'get', emptyKeyValue))); } for (const source of decryptedData.source_bk) { videos.push(new Video(`${source.label.replace(' ', '').toLowerCase()} | ${source.type}`, new ModuleRequest(source.file, 'get', emptyKeyValue))); } var found = false; for (var x = 0; x < videos.length; x++) { let video = videos[x]; if (video.videoQuality.includes('480')) { videos.unshift(videos.splice(x, 1)[0]); found = true; continue; } if (found && !video.videoQuality.includes('480')) { break; } } var chaptersObject = new Resolver(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;});"
        },
        "output": {
            "moduleID": "234234823",
            "video": [{
                "videoQuality": "720",
                "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [{
                        "key": "key",
                        "value": "value"
                    }],
                    "httpBody": null
                }
            }]
        }
    }]
}